# Migration configuration: Legacy NFS-Ganesha to Rook NFS
# This file documents the migration strategy and provides rollback options

# MIGRATION PHASES:
# Phase 1: Deploy Rook operator and CephCluster (external)
# Phase 2: Create CephNFS exports 
# Phase 3: Update media workloads to use new NFS endpoints
# Phase 4: Deprecate old manual NFS-Ganesha deployment

# External Ceph Configuration Secret
# This connects Rook to your existing Proxmox Ceph cluster
---
apiVersion: v1
kind: Secret
metadata:
  name: rook-ceph-external-cluster-details
  namespace: rook-ceph
type: Opaque
data:
  # These need to be base64 encoded values from your Ceph cluster
  # Get them with: ceph auth get-key client.admin | base64 -w 0
  userID: YWRtaW4=  # admin (base64)
  userKey: ""  # Your Ceph admin key (base64 encoded)
  
  # Monitor endpoints from your Proxmox Ceph cluster
  # Format: mon1_ip:6789,mon2_ip:6789,mon3_ip:6789
  monHost: ""  # Your monitor hosts (base64 encoded)
  
  # Cluster FSID from: ceph fsid
  fsid: ""  # Your cluster FSID (base64 encoded)

---
# Updated Media Application Configuration (Preview)
# This shows how your media workloads will mount the new Rook NFS exports

# Example: Updated Plex deployment using Rook NFS
apiVersion: apps/v1
kind: Deployment
metadata:
  name: plex-updated-example
  namespace: plex
spec:
  template:
    spec:
      containers:
      - name: plex
        image: plexinc/pms-docker:latest
        volumeMounts:
        - name: media-nfs
          mountPath: /data
          subPath: media  # TRASHGuides media folder
        - name: media-nfs
          mountPath: /downloads
          subPath: downloads  # Downloads folder
      volumes:
      - name: media-nfs
        nfs:
          # New Rook NFS endpoint
          server: rook-nfs-media.rook-ceph.svc.cluster.local
          path: /
          
---
# Migration Verification Job
apiVersion: batch/v1
kind: Job
metadata:
  name: rook-nfs-migration-verify
  namespace: default
  labels:
    app: migration
    component: verification
  annotations:
    argocd.argoproj.io/hook: PostSync
    argocd.argoproj.io/hook-weight: "10"
spec:
  ttlSecondsAfterFinished: 600
  template:
    spec:
      restartPolicy: OnFailure
      containers:
      - name: verify-migration
        image: busybox:1.36
        command:
        - /bin/sh
        - -c
        - |
          echo "üîç Verifying Rook NFS migration..."
          
          # Test old NFS endpoint (should be available during transition)
          echo "Testing legacy NFS endpoint..."
          if nc -z nfs-ganesha.nfs-ganesha.svc.cluster.local 2049; then
            echo "‚úÖ Legacy NFS endpoint accessible"
          else
            echo "‚ö†Ô∏è Legacy NFS endpoint not accessible"
          fi
          
          # Test new Rook NFS endpoint
          echo "Testing new Rook NFS endpoint..."
          timeout=300
          elapsed=0
          
          while [ $elapsed -lt $timeout ]; do
            if nc -z rook-nfs-media.rook-ceph.svc.cluster.local 2049; then
              echo "‚úÖ Rook NFS endpoint is ready!"
              
              # Test NFS mount
              mkdir -p /mnt/test-rook-nfs
              if mount -t nfs4 rook-nfs-media.rook-ceph.svc.cluster.local:/ /mnt/test-rook-nfs; then
                echo "‚úÖ Rook NFS mount successful"
                
                # Check directory structure
                if [ -f /mnt/test-rook-nfs/rook-nfs-ready.txt ]; then
                  echo "‚úÖ Rook NFS initialization confirmed:"
                  cat /mnt/test-rook-nfs/rook-nfs-ready.txt
                else
                  echo "‚ö†Ô∏è Rook NFS ready file not found"
                fi
                
                # Test write access
                echo "test-$(date +%s)" > /mnt/test-rook-nfs/migration-test.txt
                if [ -f /mnt/test-rook-nfs/migration-test.txt ]; then
                  echo "‚úÖ Rook NFS write test successful"
                  rm /mnt/test-rook-nfs/migration-test.txt
                else
                  echo "‚ùå Rook NFS write test failed"
                fi
                
                umount /mnt/test-rook-nfs
              else
                echo "‚ùå Rook NFS mount failed"
                exit 1
              fi
              
              echo "üéØ Rook NFS migration verification complete!"
              exit 0
            fi
            echo "Waiting for Rook NFS port 2049... ($elapsed/$timeout)"
            sleep 10
            elapsed=$((elapsed + 10))
          done
          
          echo "‚ùå Timeout waiting for Rook NFS"
          exit 1

---
# MIGRATION NOTES:
# 
# 1. BEFORE RUNNING:
#    - Get your Ceph cluster details:
#      * ceph auth get-key client.admin
#      * ceph mon dump (for monitor hosts)
#      * ceph fsid
#    - Update the rook-ceph-external-cluster-details secret above
#
# 2. DEPLOYMENT ORDER:
#    - Deploy Rook operator first
#    - Create external CephCluster connection
#    - Deploy CephNFS exports
#    - Update media workloads one by one
#    - Verify each workload before proceeding
#
# 3. ROLLBACK PLAN:
#    - Keep old NFS-Ganesha running during transition
#    - Media workloads can be reverted to old NFS endpoint
#    - Remove Rook resources if needed
#
# 4. BENEFITS AFTER MIGRATION:
#    ‚úÖ Native CephFS FSAL (better performance)
#    ‚úÖ Automatic HA and failover
#    ‚úÖ CRD-based management
#    ‚úÖ Integrated monitoring
#    ‚úÖ Simplified configuration
#    ‚úÖ Better Ceph cluster integration
