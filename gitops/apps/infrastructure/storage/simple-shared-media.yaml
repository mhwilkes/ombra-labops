# Shared CephFS storage for all media applications
# Single file containing all shared storage resources following TRASHGuides best practices

# Media storage namespace for shared resources
---
apiVersion: v1
kind: Namespace
metadata:
  name: media-storage
  labels:
    name: media-storage
    component: shared-storage

# Application namespaces
---
apiVersion: v1
kind: Namespace
metadata:
  name: plex
  labels:
    name: plex
    media-access: "library-only"

---
apiVersion: v1
kind: Namespace
metadata:
  name: arr
  labels:
    name: arr
    media-access: "full-access"

---
apiVersion: v1
kind: Namespace
metadata:
  name: downloads
  labels:
    name: downloads
    media-access: "downloads-media"

# Master PVC that provisions the CephFS volume in media-storage namespace
---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: shared-media-data
  namespace: media-storage
  labels:
    app: shared-media
    component: storage
    role: master-pvc
spec:
  accessModes:
    - ReadWriteMany  # CephFS supports multiple pods reading/writing simultaneously
  storageClassName: ceph-cephfs
  resources:
    requests:
      storage: 2Ti  # Large shared volume for all media data

# Wait for the master PVC to be bound, then create slave PVCs in other namespaces
# These will be created by a separate Job after the master PVC is ready

# Job to create slave PVCs that reference the same underlying PV
---
apiVersion: batch/v1
kind: Job
metadata:
  name: create-slave-pvcs
  namespace: media-storage
  labels:
    app: shared-media
    component: pvc-creator
  annotations:
    argocd.argoproj.io/hook: Sync
    argocd.argoproj.io/hook-delete-policy: BeforeHookCreation
    argocd.argoproj.io/sync-wave: "1"  # Run after the master PVC is created
spec:
  ttlSecondsAfterFinished: 300
  template:
    spec:
      serviceAccountName: pvc-creator
      restartPolicy: OnFailure
      containers:
      - name: pvc-creator
        image: bitnami/kubectl:1.28
        command:
        - /bin/bash
        - -c
        - |
          echo "Waiting for master PVC to be bound..."
          
          # Wait for the master PVC to be bound
          while true; do
            STATUS=$(kubectl get pvc shared-media-data -n media-storage -o jsonpath='{.status.phase}' 2>/dev/null || echo "NotFound")
            if [ "$STATUS" = "Bound" ]; then
              echo "Master PVC is bound, proceeding to create slave PVCs..."
              break
            elif [ "$STATUS" = "NotFound" ]; then
              echo "Master PVC not found yet, waiting..."
            else
              echo "Master PVC status: $STATUS, waiting..."
            fi
            sleep 10
          done
          
          # Get the PV name from the master PVC
          PV_NAME=$(kubectl get pvc shared-media-data -n media-storage -o jsonpath='{.spec.volumeName}')
          echo "Master PVC is bound to PV: $PV_NAME"
          
          # Create slave PVCs in each namespace
          for NAMESPACE in plex arr downloads; do
            echo "Creating slave PVC in namespace: $NAMESPACE"
            
            # Check if namespace exists, create if not
            kubectl create namespace $NAMESPACE --dry-run=client -o yaml | kubectl apply -f -
            
            # Create the slave PVC
            cat <<EOF | kubectl apply -f -
          apiVersion: v1
          kind: PersistentVolumeClaim
          metadata:
            name: shared-media-data
            namespace: $NAMESPACE
            labels:
              app: shared-media
              component: storage
              role: slave-pvc
              access-pattern: "${NAMESPACE}-access"
          spec:
            accessModes:
              - ReadWriteMany
            storageClassName: ""  # Empty to use manual PV binding
            volumeName: $PV_NAME  # Reference the same PV as master
            resources:
              requests:
                storage: 2Ti
          EOF
            
            if [ $? -eq 0 ]; then
              echo "Successfully created slave PVC in $NAMESPACE"
            else
              echo "Failed to create slave PVC in $NAMESPACE"
              exit 1
            fi
          done
          
          echo "All slave PVCs created successfully!"

---
# ServiceAccount for the PVC creator job
apiVersion: v1
kind: ServiceAccount
metadata:
  name: pvc-creator
  namespace: media-storage

---
# ClusterRole with permissions to manage PVCs and namespaces
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: pvc-creator
rules:
- apiGroups: [""]
  resources: ["persistentvolumeclaims", "persistentvolumes"]
  verbs: ["get", "list", "create", "update", "patch"]
- apiGroups: [""]
  resources: ["namespaces"]
  verbs: ["get", "list", "create"]

---
# ClusterRoleBinding for the PVC creator
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: pvc-creator
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: pvc-creator
subjects:
- kind: ServiceAccount
  name: pvc-creator
  namespace: media-storage

# Initialize directory structure using ArgoCD PostSync hook
---
apiVersion: batch/v1
kind: Job
metadata:
  name: media-structure-init
  namespace: media-storage
  labels:
    app: shared-media
    component: init
  annotations:
    argocd.argoproj.io/hook: PostSync
    argocd.argoproj.io/hook-delete-policy: BeforeHookCreation
    argocd.argoproj.io/sync-wave: "2"  # Run after slave PVCs are created
spec:
  ttlSecondsAfterFinished: 300  # Clean up after 5 minutes
  template:
    spec:
      restartPolicy: OnFailure
      # Remove security context that might conflict with CephFS
      containers:
      - name: structure-init
        image: busybox:1.36
        # Run as root to be able to create directories and set permissions
        securityContext:
          runAsUser: 0
          runAsGroup: 0
        command:
        - /bin/sh
        - -c
        - |
          echo "Creating TRASHGuides recommended directory structure..."
          
          # Create the recommended folder structure
          mkdir -p /data/torrents/{movies,tv,music,books}
          mkdir -p /data/usenet/incomplete
          mkdir -p /data/usenet/complete/{movies,tv,music,books}
          mkdir -p /data/media/{movies,tv,music,books}
          mkdir -p /data/downloads  # General downloads folder
          
          echo "Setting proper permissions..."
          # Set permissions without trying to change ownership of mount point
          find /data -type d -not -path /data -exec chmod 775 {} \; 2>/dev/null || true
          find /data -type d -not -path /data -exec chown 2000:2000 {} \; 2>/dev/null || true
          
          # Ensure the directories we created are owned by the media user
          chown -R 2000:2000 /data/torrents /data/usenet /data/media /data/downloads 2>/dev/null || true
          chmod -R 775 /data/torrents /data/usenet /data/media /data/downloads 2>/dev/null || true
          
          echo "Directory structure created successfully!"
          echo "Final structure:"
          find /data -type d 2>/dev/null | sort || echo "Could not list all directories, but structure should be created"
        volumeMounts:
        - name: shared-data
          mountPath: /data
      volumes:
      - name: shared-data
        persistentVolumeClaim:
          claimName: shared-media-data
