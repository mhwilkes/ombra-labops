# Fixed approach: Single PVC with subPath mounts for true shared storage
# This is the most reliable way to share CephFS storage across namespaces

# Media storage namespace for shared resources
---
apiVersion: v1
kind: Namespace
metadata:
  name: media-storage
  labels:
    name: media-storage
    component: shared-storage

# Application namespaces
---
apiVersion: v1
kind: Namespace
metadata:
  name: plex
  labels:
    name: plex
    media-access: "library-only"

---
apiVersion: v1
kind: Namespace
metadata:
  name: arr
  labels:
    name: arr
    media-access: "full-access"

---
apiVersion: v1
kind: Namespace
metadata:
  name: downloads
  labels:
    name: downloads
    media-access: "downloads-media"

# Single master PVC - this is the only PVC that actually gets CephFS storage
---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: shared-media-data
  namespace: media-storage
  labels:
    app: shared-media
    component: storage
    role: master-pvc
spec:
  accessModes:
    - ReadWriteMany  # CephFS supports multiple pods reading/writing simultaneously
  storageClassName: ceph-cephfs
  resources:
    requests:
      storage: 2Ti  # Large shared volume for all media data

# Initialize directory structure using ArgoCD PostSync hook
---
apiVersion: batch/v1
kind: Job
metadata:
  name: media-structure-init
  namespace: media-storage
  labels:
    app: shared-media
    component: init
  annotations:
    argocd.argoproj.io/hook: PostSync
    argocd.argoproj.io/hook-delete-policy: BeforeHookCreation
spec:
  ttlSecondsAfterFinished: 300  # Clean up after 5 minutes
  template:
    spec:
      restartPolicy: OnFailure
      # Remove security context that might conflict with CephFS
      containers:
      - name: structure-init
        image: busybox:1.36
        # Run as root to be able to create directories and set permissions
        securityContext:
          runAsUser: 0
          runAsGroup: 0
        command:
        - /bin/sh
        - -c
        - |
          echo "Creating TRASHGuides recommended directory structure..."
          
          # Create the recommended folder structure
          mkdir -p /data/torrents/{movies,tv,music,books}
          mkdir -p /data/usenet/incomplete
          mkdir -p /data/usenet/complete/{movies,tv,music,books}
          mkdir -p /data/media/{movies,tv,music,books}
          mkdir -p /data/downloads  # General downloads folder
          
          echo "Setting proper permissions..."
          # Set permissions without trying to change ownership of mount point
          find /data -type d -not -path /data -exec chmod 775 {} \; 2>/dev/null || true
          find /data -type d -not -path /data -exec chown 2000:2000 {} \; 2>/dev/null || true
          
          # Ensure the directories we created are owned by the media user
          chown -R 2000:2000 /data/torrents /data/usenet /data/media /data/downloads 2>/dev/null || true
          chmod -R 775 /data/torrents /data/usenet /data/media /data/downloads 2>/dev/null || true
          
          echo "Directory structure created successfully!"
          echo "Final structure:"
          find /data -type d 2>/dev/null | sort || echo "Could not list all directories, but structure should be created"
        volumeMounts:
        - name: shared-data
          mountPath: /data
      volumes:
      - name: shared-data
        persistentVolumeClaim:
          claimName: shared-media-data
