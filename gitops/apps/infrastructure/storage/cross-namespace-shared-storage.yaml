# DEPRECATED: Cross-namespace shared storage approach
# This file is no longer used - replaced by direct NFS mounts in applications
# 
# The new approach:
# 1. Deploy NFS-Ganesha (nfs-ganesha-k8s.yaml) 
# 2. Mount NFS directly in each application (see NFS-MOUNT-EXAMPLES.md)
# 3. No shared PVCs needed
#
# This file can be safely deleted after confirming NFS-based solution works.
#
# Original cross-namespace PVC approach (DEPRECATED):

# Application namespaces
---
apiVersion: v1
kind: Namespace
metadata:
  name: plex
  labels:
    name: plex
    media-access: "library-only"

---
apiVersion: v1
kind: Namespace
metadata:
  name: arr
  labels:
    name: arr
    media-access: "full-access"

---
apiVersion: v1
kind: Namespace
metadata:
  name: downloads
  labels:
    name: downloads
    media-access: "downloads-media"

---
apiVersion: v1
kind: Namespace
metadata:
  name: media-storage
  labels:
    name: media-storage
    component: shared-storage

# Single PersistentVolume - the actual storage
---
apiVersion: v1
kind: PersistentVolume
metadata:
  name: shared-media-pv
  labels:
    app: shared-media
    component: storage
spec:
  capacity:
    storage: 2Ti
  accessModes:
    - ReadWriteMany
  persistentVolumeReclaimPolicy: Retain
  storageClassName: shared-media-storage
  csi:
    driver: cephfs.csi.ceph.com
    nodeStageSecretRef:
      name: csi-cephfs-secret
      namespace: ceph-csi-cephfs
    nodePublishSecretRef:
      name: csi-cephfs-secret
      namespace: ceph-csi-cephfs
    controllerExpandSecretRef:
      name: csi-cephfs-secret
      namespace: ceph-csi-cephfs
    volumeAttributes:
      clusterID: ombra-ceph
      fsName: cephfs
      subvolumePath: /shared-media
    volumeHandle: shared-media-volume

# PVC in media-storage namespace (for initialization)
---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: shared-media-data
  namespace: media-storage
  labels:
    app: shared-media
    component: storage
    role: master-pvc
spec:
  accessModes:
    - ReadWriteMany
  storageClassName: shared-media-storage
  volumeName: shared-media-pv
  resources:
    requests:
      storage: 2Ti

# PVC in plex namespace
---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: shared-media-data
  namespace: plex
  labels:
    app: shared-media
    component: storage
spec:
  accessModes:
    - ReadWriteMany
  storageClassName: shared-media-storage
  volumeName: shared-media-pv
  resources:
    requests:
      storage: 2Ti

# PVC in arr namespace
---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: shared-media-data
  namespace: arr
  labels:
    app: shared-media
    component: storage
spec:
  accessModes:
    - ReadWriteMany
  storageClassName: shared-media-storage
  volumeName: shared-media-pv
  resources:
    requests:
      storage: 2Ti

# PVC in downloads namespace
---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: shared-media-data
  namespace: downloads
  labels:
    app: shared-media
    component: storage
spec:
  accessModes:
    - ReadWriteMany
  storageClassName: shared-media-storage
  volumeName: shared-media-pv
  resources:
    requests:
      storage: 2Ti

# Custom StorageClass for shared media
---
apiVersion: storage.k8s.io/v1
kind: StorageClass
metadata:
  name: shared-media-storage
  labels:
    app: shared-media
provisioner: cephfs.csi.ceph.com
allowVolumeExpansion: true
reclaimPolicy: Retain
parameters:
  clusterID: ombra-ceph
  fsName: cephfs
  csi.storage.k8s.io/provisioner-secret-name: csi-cephfs-secret
  csi.storage.k8s.io/provisioner-secret-namespace: ceph-csi-cephfs
  csi.storage.k8s.io/controller-expand-secret-name: csi-cephfs-secret
  csi.storage.k8s.io/controller-expand-secret-namespace: ceph-csi-cephfs
  csi.storage.k8s.io/node-stage-secret-name: csi-cephfs-secret
  csi.storage.k8s.io/node-stage-secret-namespace: ceph-csi-cephfs

# Initialize directory structure using ArgoCD PostSync hook
---
apiVersion: batch/v1
kind: Job
metadata:
  name: media-structure-init
  namespace: media-storage
  labels:
    app: shared-media
    component: init
  annotations:
    argocd.argoproj.io/hook: PostSync
    argocd.argoproj.io/hook-delete-policy: BeforeHookCreation
spec:
  ttlSecondsAfterFinished: 300
  template:
    spec:
      restartPolicy: OnFailure
      containers:
      - name: structure-init
        image: busybox:1.36
        securityContext:
          runAsUser: 0
          runAsGroup: 0
        command:
        - /bin/sh
        - -c
        - |
          echo "Creating TRASHGuides recommended directory structure..."
          
          # Create the recommended folder structure
          mkdir -p /data/torrents/{movies,tv,music,books}
          mkdir -p /data/usenet/incomplete
          mkdir -p /data/usenet/complete/{movies,tv,music,books}
          mkdir -p /data/media/{movies,tv,music,books}
          mkdir -p /data/downloads
          
          echo "Setting proper permissions..."
          find /data -type d -not -path /data -exec chmod 775 {} \; 2>/dev/null || true
          find /data -type d -not -path /data -exec chown 2000:2000 {} \; 2>/dev/null || true
          
          chown -R 2000:2000 /data/torrents /data/usenet /data/media /data/downloads 2>/dev/null || true
          chmod -R 775 /data/torrents /data/usenet /data/media /data/downloads 2>/dev/null || true
          
          echo "Directory structure created successfully!"
          echo "Final structure:"
          find /data -type d 2>/dev/null | sort || echo "Structure created"
        volumeMounts:
        - name: shared-data
          mountPath: /data
      volumes:
      - name: shared-data
        persistentVolumeClaim:
          claimName: shared-media-data
