---
apiVersion: apps/v1
kind: DaemonSet
metadata:
  name: wazuh-agent
  namespace: wazuh-system
  labels:
    app: wazuh-agent
    component: agent
spec:
  selector:
    matchLabels:
      app: wazuh-agent
  template:
    metadata:
      labels:
        app: wazuh-agent
        component: agent
    spec:
      serviceAccountName: wazuh-agent
      hostNetwork: true
      hostPID: true
      dnsPolicy: ClusterFirstWithHostNet
      containers:
      - name: wazuh-agent
        image: wazuh/wazuh-agent:4.12.0
        imagePullPolicy: IfNotPresent
        resources:
          requests:
            cpu: 100m
            memory: 128Mi
          limits:
            cpu: 300m
            memory: 512Mi
        securityContext:
          privileged: true
          runAsUser: 0
        env:
        - name: WAZUH_MANAGER
          value: "wazuh-manager.wazuh-system.svc.cluster.local"
        - name: WAZUH_REGISTRATION_SERVER
          value: "wazuh-manager.wazuh-system.svc.cluster.local"
        - name: WAZUH_REGISTRATION_PASSWORD
          value: ""  # Optional registration password
        - name: WAZUH_AGENT_GROUP
          value: "kubernetes"
        - name: WAZUH_AGENT_NAME
          valueFrom:
            fieldRef:
              fieldPath: spec.nodeName
        - name: NODE_NAME
          valueFrom:
            fieldRef:
              fieldPath: spec.nodeName
        volumeMounts:
        - name: proc
          mountPath: /host/proc
          readOnly: true
        - name: sys
          mountPath: /host/sys
          readOnly: true
        - name: root
          mountPath: /host/root
          readOnly: true
        - name: var-log
          mountPath: /host/var/log
          readOnly: true
        - name: var-lib-docker
          mountPath: /host/var/lib/docker
          readOnly: true
        - name: dev
          mountPath: /host/dev
          readOnly: true
        - name: etc
          mountPath: /host/etc
          readOnly: true
        - name: boot
          mountPath: /host/boot
          readOnly: true
        - name: wazuh-agent-config
          mountPath: /var/ossec/etc/ossec.conf
          subPath: ossec.conf
        livenessProbe:
          exec:
            command:
            - /bin/sh
            - -c
            - /var/ossec/bin/wazuh-control status | grep -q "wazuh-agentd is running"
          initialDelaySeconds: 60
          periodSeconds: 30
          timeoutSeconds: 5
          failureThreshold: 3
        readinessProbe:
          exec:
            command:
            - /bin/sh
            - -c
            - /var/ossec/bin/wazuh-control status | grep -q "wazuh-agentd is running"
          initialDelaySeconds: 30
          periodSeconds: 10
          timeoutSeconds: 5
          failureThreshold: 3
      volumes:
      - name: proc
        hostPath:
          path: /proc
      - name: sys
        hostPath:
          path: /sys
      - name: root
        hostPath:
          path: /
      - name: var-log
        hostPath:
          path: /var/log
      - name: var-lib-docker
        hostPath:
          path: /var/lib/docker
      - name: dev
        hostPath:
          path: /dev
      - name: etc
        hostPath:
          path: /etc
      - name: boot
        hostPath:
          path: /boot
      - name: wazuh-agent-config
        configMap:
          name: wazuh-agent-config
      tolerations:
      - effect: NoSchedule
        operator: Exists
      - effect: NoExecute
        operator: Exists
      nodeSelector: {}
---
apiVersion: v1
kind: ServiceAccount
metadata:
  name: wazuh-agent
  namespace: wazuh-system
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: wazuh-agent
rules:
- apiGroups: [""]
  resources: ["nodes", "pods", "services", "endpoints", "events"]
  verbs: ["get", "list", "watch"]
- apiGroups: ["apps"]
  resources: ["deployments", "replicasets", "daemonsets"]
  verbs: ["get", "list", "watch"]
- apiGroups: ["extensions"]
  resources: ["deployments", "replicasets", "daemonsets"]
  verbs: ["get", "list", "watch"]
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: wazuh-agent
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: wazuh-agent
subjects:
- kind: ServiceAccount
  name: wazuh-agent
  namespace: wazuh-system
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: wazuh-agent-config
  namespace: wazuh-system
data:
  ossec.conf: |
    <ossec_config>
      <client>
        <server>
          <address>wazuh-manager.wazuh-system.svc.cluster.local</address>
          <port>1514</port>
          <protocol>tcp</protocol>
        </server>
        <config-profile>kubernetes</config-profile>
        <notify_time>10</notify_time>
        <time-reconnect>60</time-reconnect>
        <auto_restart>yes</auto_restart>
        <crypto_method>aes</crypto_method>
      </client>

      <client_buffer>
        <disabled>no</disabled>
        <queue_size>5000</queue_size>
        <events_per_second>500</events_per_second>
      </client_buffer>

      <!-- File integrity monitoring -->
      <syscheck>
        <disabled>no</disabled>
        <frequency>43200</frequency>
        <scan_on_start>yes</scan_on_start>
        <auto_ignore frequency="10" timeframe="3600">yes</auto_ignore>
        
        <!-- Monitor Kubernetes configuration files -->
        <directories realtime="yes" check_all="yes" report_changes="yes">/host/etc/kubernetes</directories>
        <directories realtime="yes" check_all="yes" report_changes="yes">/host/var/lib/kubelet</directories>
        <directories realtime="yes" check_all="yes" report_changes="yes">/host/etc/docker</directories>
        
        <!-- Monitor system files -->
        <directories check_all="yes">/host/etc</directories>
        <directories check_all="yes">/host/usr/bin</directories>
        <directories check_all="yes">/host/usr/sbin</directories>
        <directories check_all="yes">/host/bin</directories>
        <directories check_all="yes">/host/sbin</directories>
        <directories check_all="yes">/host/boot</directories>
        
        <!-- Ignore some files to reduce noise -->
        <ignore>/host/etc/mtab</ignore>
        <ignore>/host/etc/hosts.deny</ignore>
        <ignore>/host/etc/mail/statistics</ignore>
        <ignore>/host/etc/random-seed</ignore>
        <ignore>/host/etc/random.seed</ignore>
        <ignore>/host/etc/adjtime</ignore>
        <ignore>/host/etc/httpd/logs</ignore>
        <ignore>/host/etc/utmpx</ignore>
        <ignore>/host/etc/wtmpx</ignore>
        <ignore>/host/etc/cups/certs</ignore>
        <ignore>/host/etc/dumpdates</ignore>
        <ignore>/host/etc/svc/volatile</ignore>
        <ignore>/host/var/lib/kubelet/pods</ignore>
        <ignore>/host/var/lib/docker/containers</ignore>
        
        <nodiff>/host/etc/ssl/private.key</nodiff>
        <skip_nfs>yes</skip_nfs>
        <skip_dev>yes</skip_dev>
        <skip_proc>yes</skip_proc>
        <skip_sys>yes</skip_sys>
      </syscheck>

      <!-- Rootcheck -->
      <rootcheck>
        <disabled>no</disabled>
        <check_files>yes</check_files>
        <check_trojans>yes</check_trojans>
        <check_dev>yes</check_dev>
        <check_sys>yes</check_sys>
        <check_pids>yes</check_pids>
        <check_ports>yes</check_ports>
        <check_if>yes</check_if>
        <frequency>43200</frequency>
        <rootkit_files>/var/ossec/etc/rootcheck/rootkit_files.txt</rootkit_files>
        <rootkit_trojans>/var/ossec/etc/rootcheck/rootkit_trojans.txt</rootkit_trojans>
        <skip_nfs>yes</skip_nfs>
        <system_audit>/var/ossec/etc/rootcheck/system_audit_rcl.txt</system_audit>
        <system_audit>/var/ossec/etc/rootcheck/system_audit_ssh.txt</system_audit>
        <system_audit>/var/ossec/etc/rootcheck/cis_debian_linux_rcl.txt</system_audit>
      </rootcheck>

      <!-- OpenSCAP -->
      <wodle name="open-scap">
        <disabled>no</disabled>
        <timeout>1800</timeout>
        <interval>1d</interval>
        <scan-on-start>yes</scan-on-start>
      </wodle>

      <!-- CIS-CAT -->
      <wodle name="cis-cat">
        <disabled>yes</disabled>
        <timeout>1800</timeout>
        <interval>1d</interval>
        <scan-on-start>yes</scan-on-start>
      </wodle>

      <!-- System inventory -->
      <wodle name="syscollector">
        <disabled>no</disabled>
        <interval>1h</interval>
        <scan_on_start>yes</scan_on_start>
        <hardware>yes</hardware>
        <os>yes</os>
        <network>yes</network>
        <packages>yes</packages>
        <ports all="no">yes</ports>
        <processes>yes</processes>
        <hotfixes>yes</hotfixes>
      </wodle>

      <!-- Vulnerability detection -->
      <wodle name="vulnerability-detector">
        <disabled>no</disabled>
        <interval>1d</interval>
        <ignore_time>6h</ignore_time>
        <run_on_start>yes</run_on_start>
        <feed name="ubuntu-18">
          <disabled>no</disabled>
          <update_interval>1h</update_interval>
        </feed>
        <feed name="redhat">
          <disabled>no</disabled>
          <update_interval>1h</update_interval>
        </feed>
        <feed name="debian-9">
          <disabled>no</disabled>
          <update_interval>1h</update_interval>
        </feed>
      </wodle>

      <!-- Docker listener -->
      <wodle name="docker-listener">
        <disabled>no</disabled>
        <interval>10m</interval>
        <attempts>5</attempts>
        <run_on_start>yes</run_on_start>
      </wodle>

      <!-- Log analysis -->
      <localfile>
        <log_format>syslog</log_format>
        <location>/host/var/log/syslog</location>
      </localfile>

      <localfile>
        <log_format>syslog</log_format>
        <location>/host/var/log/messages</location>
      </localfile>

      <localfile>
        <log_format>syslog</log_format>
        <location>/host/var/log/secure</location>
      </localfile>

      <localfile>
        <log_format>command</log_format>
        <command>df -P</command>
        <alias>df -P</alias>
        <frequency>360</frequency>
      </localfile>

      <localfile>
        <log_format>full_command</log_format>
        <command>netstat -tulpn | sed 's/\([[:alnum:]]\+\)\ \+[[:digit:]]\+\ \+[[:digit:]]\+\ \+\(.*\):\([[:digit:]]*\)\ \+\([0-9\.\:\*]\+\):\([[:digit:]]*\)\ \+\([[:upper:]]\+\)\ \+\([[:digit:]]*\/[[:alnum:]\-]*\).*/\1 \2 \3 \4 \5 \6 \7/' | sort -k 4 -g | sed 's/^\(.*\)\ \(.*\)\ \(.*\)\ \(.*\)\ \(.*\)\ \(.*\)\ \(.*\)$/\1 \2:\3 \4:\5 \6 \7/'</command>
        <alias>netstat listening ports</alias>
        <frequency>360</frequency>
      </localfile>

      <localfile>
        <log_format>full_command</log_format>
        <command>last -n 20</command>
        <frequency>360</frequency>
      </localfile>

      <!-- Kubernetes audit logs -->
      <localfile>
        <log_format>json</log_format>
        <location>/host/var/log/audit/audit.log</location>
      </localfile>

      <!-- Container logs -->
      <localfile>
        <log_format>json</log_format>
        <location>/host/var/log/containers/*.log</location>
      </localfile>

      <!-- Active response -->
      <active-response>
        <disabled>no</disabled>
        <ca_store>/var/ossec/etc/wpk_root.pem</ca_store>
        <ca_verification>yes</ca_verification>
      </active-response>

    </ossec_config>
